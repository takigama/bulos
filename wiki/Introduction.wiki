#summary What BULOS is and Why it is.

= Introduction =

Welcome to BULOS, here is (in part) a history as well as what BULOS encompasses.


= Details =

A long time ago when virtualisation technology took off, it had always occured to me that being able to package up some form of service that would be easily transportable between servers. Of course, originally it was all just VMWare and there weren't many options so I didn't think long and hard about it. Some time later QEMU came out and my interest was once again raised, I had been working on iSCSI office and realised what I was doing with it would be more suited to some form of service-based offering. But that was several years ago.

Cloud computing and utility computing started to ramp up and I again turned back to my little project with some more enthusiasm. Xen took off, and then KVM became available, both those projects resulted in me thinking "you could compact an entire OS running a web server capable of controlling lots of KVM/Xen instances into about 200mb quite easily", and thus the beginnings of BULOS were born.

Going back to iSCSI office, I had a project that would pull apart parts of a distribution in order to repackage it for iSCSI. I also (in creating my hypervisor manager) didn't want to have to write and maintain my own base OS (not even a small one) because thats a job unto itself. So my desktop machine was running fedora and I wrote a little script that would grab the files from my desktop distro (given a bunch of package names) and create a kernel/initrd from them.

Later this expanded massively when I realised the path I was going down. It started out being able to pull packages from repositories or from a CDROM/file system, unpack them, clean off some files I didn't need, then create the OS. Some time passed and I realised that a shell script was never going to cut it and I moved the entire thing to a c++ codebase running with a KDE gui. It was during that time I had alot of idea's as to what a bulos OS would be and what BULOS itself could achieve.

So I wrote a tool that did what I had originally intended, take a bunch of package names, tie it to a distribution, add some code to remove files we didnt need from the original packages, add a set of "startup" code and away we went. I was building utility OS's fairly simply.

Move forward about a year and it became clear that what I really needed to provide was a way of controlling any number of BULOS created utility computers running a single utility. So BULOS is now web based, and while the architecture of the control mechanisms have remained fixed the implementation has changed somewhat to reflect what I'm trying to achieve. Thus the BULOS API was born, a base set of code providing a web page and soap service which is able to be extended to control just about anything.

To me this means providing a way to build utility OS's that allow anyone to create their own utility and publish it with in their own infrastructure. For example, I might create a web server utility based on Fedora 9, write some code (extending BULOS API that controls it) and push it off somewhere. It will boot into about 200mb of ram, and away I go.

Sound simple? It is, and in my humble opinion that's exactly what utility computing should be about, simplicity.

One other thing I should explain (because i've been asked before) is why I base off known distributions. When people thing distribution and look at what I'm doing they think "there is no way your going to boot a distribution (even running some small piece of software) efficiently", and this true. But that's not why we're using a distribution, we're not installing anything at all in fact. What we are doing is using the distribution packages as a source of software, we ignore dependencies because in alot of cases they're irrelevant to the service itself (i.e. if you want samba, fedora may install a multitude of packages that revolve around documentation and management that have no consequence for us, thus we dont install them.

But the main reason we use distributions is because they are kept up to date, we dont have to create our own binaries and ship them because they're already provided by someone else and that is no small thing. I dont want to reinvent the distribution wheel, not when its already being provided by hundreds of people in the form of redhat, centos, fedora, ubuntu, slackare, arch linux, etc. They do it a million times more efficiently then I can or will, but at the end of the day, theres just no value in it (at this point) for us.

What this also means is that we need a way of distributing our "utility" and it's important to take into account the GPL in this calculation. The GPL says that if you provide someone a binary application that is distributed under the GPL, then YOU are responsible for providing the corresponding source for it (think about that very hard, if you gave someone a fedora rpm they have the right to ask YOU for the source to it, you cant say "go get it from fedora", that does not cut it). This is why our "exported" repository of utility OS's will contain only a list of packages, the "cleanup" list and the control code (written in PHP) so that when you distribute your utility OS, your not providing a binary copy of the "kernel" package from fedora (for instance). All you are saying is "this utility uses the kernel package form fedora, go get it yourself". BULOS will in fact get it for you, but the person who wrote that utility is not responsible for providing you with a copy of the source for "kernel".

Keep in mind, that also means that if your "utility" requires some binary package that's GPL and not provided by the original distribution, we must (be able to if asked) provide the source. This is is quite easy, we just add a "custom" package to our project (that contains both binary and source) and get it to install the source into /usr/share/doc or /usr/src (somewhere appropriate), that way when the utility OS is built, it'll get cleaned out by the builder and not waste valuable RAM. If the utility is downloaded by someone else, then any custom packages are contained (in entirety) within the export and so the source code is provided along with the binary and we automatically fulfil our obligations under the GPL.

How does this affect people using the utility? Well, if you were to use a utility to provide file sharing (cifs for example) to users on your network your not required to provide the source code for that software, your not distributing samba to them, your providing them a service (much the same as you would if you installed a linux machine and let them have access to it). In reality the utility may be based off fedora and so getting the source is easy enough, but not a requirement in that instance under the GPL (as I understand it).

All this means that a "utility" OS may only be in the order of kilobytes rather then megabytes or gigabytes, and that makes distribution EASY!